"-----------------------------------------------------------------------------
" vim-plug plugin manager
"-----------------------------------------------------------------------------
" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
    Plug 'itchyny/lightline.vim'            " Minimalist status/tab line
    Plug 'sheerun/vim-polyglot'             " Syntax coloring
    Plug 'tpope/vim-fugitive'               " git wrapper for vim
    Plug 'tpope/vim-surround'               " change parantheticals
    Plug 'airblade/vim-gitgutter'           " Git Gutter display
    Plug 'tpope/vim-commentary'             " Code commenting
call plug#end()

" -----------------------------------------------------------------------------
" plugin configurations
" -----------------------------------------------------------------------------

" itchyny/lightline.vim
set laststatus=2
let g:lightline = {
    \ 'colorscheme': 'one',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead'
    \ },
\ }

" airblade/vim-gitgutter
highlight SignColumn        ctermbg=Grey   guibg=Black
highlight GitGutterDelete   ctermfg=Red     guifg=Red
highlight GitGutterAdd      ctermfg=Green   guifg=Green
highlight GitGutterChange   ctermfg=Blue    guifg=Blue

" -----------------------------------------------------------------------------
" custom files
" -----------------------------------------------------------------------------
filetype plugin on " load settings by filetype from .vim/ftplugin
source ~/.files/vim/snippets/snippets.vim " custom snippets
source ~/.files/vim/netrw_settings.vim

" -----------------------------------------------------------------------------
" style settings
" -----------------------------------------------------------------------------
colorscheme melvor
syntax enable      " Enable syntax highlighting
set nocompatible   " Don't emulate vi
set noshowmode     " Don't display, handled by lightlight plugin
set mouse=a        " Enable mouse
set visualbell     " turn off annoying bell noise
set title          " change the terminal title
set background=dark
set hlsearch       " Highlight search terms
set incsearch      " Highlight incrementally while searching
set colorcolumn=80 " Draws column at 80 characters
set nowrap         " Lines don't wrap
set expandtab      " Tabs become spaces
set shiftwidth=4   " Shifts only shift three spaces
set softtabstop=0  " If non-zero, makes the <TAB> & <BS> keys feel like tabs
set tabstop=4      " Tabs stop at three characters
set backspace=indent,eol,start " Backspace over everything in insert mode
set autoindent     " Auto indent
set copyindent     " Use last line indentation, affects <BR> key
set smarttab       " Insert new line tabs based on shiftwidth not tabstop
set list           " List will mark any characters specified by `listchars`
set listchars=tab:\ \ ,trail:·,extends:▶
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o " Don't auto-complete these files
set path+=**       " fuzzy finder for file-related tasks
set wildmenu       " display matching files when tab completing

highlight Visual guifg=White guibg=LightBlue gui=none

" VIM Columns & Gutter
set number         " Show line number on cursor
set relativenumber " Show relative line numbers
highlight VertSplit     ctermbg=Black       guibg=Grey
highlight LineNrAbove   ctermfg=LightRed    guifg=LightRed
highlight LineNrBelow   ctermfg=LightGreen  guifg=LightGreen

" set foldcolumn=2
" highlight FoldColumn    ctermbg=Black  guibg=Grey
" highlight Folded        ctermbg=Blue ctermfg=Grey

" -----------------------------------------------------------------------------
" Mappings
" -----------------------------------------------------------------------------
" source .vimrc
map <Leader>sv :source $MYVIMRC<CR>

" Open netrw sidebar
nnoremap <Leader>e :24Lexplore<CR>

" Open Git explorer
nnoremap <Leader>g :Git<CR>

" Open terminal
map <Leader>t :belowright terminal ++rows=10<CR>

" Toggle Tagbar
nmap <Leader>] :TagbarToggle<CR>

" Toggle QuickFix panel
nnoremap <silent> <Leader>c :call QuickFix_toggle()<CR>

" Tab to cycle tabs
nnoremap <Tab> :tabn<CR>
nnoremap <S-Tab> :tabp<CR>

" Insert Mode escape
inoremap jk <Esc>
inoremap kj <Esc>

" Keep cursor at the bottom of the visual selection after you yank it.
vmap y ygv<Esc>

" Prevent selecting and pasting from overwriting what you originally copied.
xnoremap p pgvy

" Prevent x from overriding copy
noremap x "_x
noremap X "_X

" Escape to normal mode after inserting a line
noremap o o<Esc>
noremap O O<Esc>

" Replace all instances of term under cursor from *
nnoremap <Leader>r :%s///gc<Left><Left><Left>

" Clear search highlights.
map <Leader>8 :let @/=''<CR>

" Blink on highlight during search
nnoremap <silent> n n:call HLNext(0.2)<cr>
nnoremap <silent> N N:call HLNext(0.2)<cr>

" -----------------------------------------------------------------------------
" Autocommands & Functions
" -----------------------------------------------------------------------------
" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e " Open markdown files with Chrome.

" Update buffer if focus is changed outside of vim
au FocusGained,BufEnter * :checktime

" Auto-resize splits when Vim is resized
autocmd VimResized * wincmd =

" Adjust the column color of active pane
function! OnWinEnter()
    setlocal cursorline

    if exists('w:initial_cc')
        let &colorcolumn = w:initial_cc
    endif
endfunction

function! OnWinLeave()
    setlocal nocursorline

    if !exists('w:initial_cc')
        let w:initial_cc=&colorcolumn
    endif
        let &colorcolumn = 0
endfunction

augroup ActiveWindowStyling
    autocmd!
    autocmd WinEnter,BufWinEnter * call OnWinEnter()
    autocmd WinLeave * call OnWinLeave()
augroup END

" Highlight Blink terms that are search and selected
function! HLNext (blinktime)
    highlight WhiteOnRed ctermfg=white ctermbg=red
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#'.@/
    let blinks = 2

    for n in range(1,blinks)
        let red = matchadd('WhiteOnRed', target_pat, 101)
        redraw
        exec 'sleep ' . float2nr(a:blinktime / (2*blinks) * 1000) . 'm'
        call matchdelete(red)
        redraw
        exec 'sleep ' . float2nr(a:blinktime / (2*blinks) * 1000) . 'm'
    endfor
endfunction

" Toggle quickfix window.
function! QuickFix_toggle()
    for i in range(1, winnr('$'))
        let bnum = winbufnr(i)
        if getbufvar(bnum, '&buftype') == 'quickfix'
            cclose
            return
        endif
    endfor
    copen
endfunction
